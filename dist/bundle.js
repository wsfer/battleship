/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.scss":
/*!***********************!*\
  !*** ./src/main.scss ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://battleship/./src/main.scss?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.scss */ \"./src/main.scss\");\n/* harmony import */ var _scripts_audioController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/audioController */ \"./src/scripts/audioController.js\");\n/* harmony import */ var _scripts_DOMCreator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/DOMCreator */ \"./src/scripts/DOMCreator.js\");\n/* harmony import */ var _scripts_eventCreator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/eventCreator */ \"./src/scripts/eventCreator.js\");\n/* harmony import */ var _scripts_fleetBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/fleetBuilder */ \"./src/scripts/fleetBuilder.js\");\n/* harmony import */ var _scripts_gameboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scripts/gameboard */ \"./src/scripts/gameboard.js\");\n/* harmony import */ var _scripts_player__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scripts/player */ \"./src/scripts/player.js\");\n/* harmony import */ var _scripts_computerPlayer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scripts/computerPlayer */ \"./src/scripts/computerPlayer.js\");\n/* harmony import */ var _scripts_computerAI__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scripts/computerAI */ \"./src/scripts/computerAI.js\");\n/* harmony import */ var _scripts_gameController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scripts/gameController */ \"./src/scripts/gameController.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst audio = new _scripts_audioController__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\nconst startGame = function initializePagesAndObjects() {\n    document.querySelector('.js-reset-game').style.display = 'none';\n\n    const startScreen = _scripts_DOMCreator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createStartScreen();\n    const fleetScreen = _scripts_DOMCreator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createFleetScreen();\n    const gameScreen = _scripts_DOMCreator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createGameScreen();\n\n    const playerFleet = new _scripts_fleetBuilder__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    const computerFleet = new _scripts_fleetBuilder__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    let playerBoard = null;\n    let computerBoard = null;\n    let player = null;\n    let computer = null;\n    let game = null;\n\n    startScreen.querySelector('.js-new-game').addEventListener('click', () => {\n        document.querySelector('main').textContent = '';\n        document.querySelector('.js-reset-game').style.display = 'block';\n\n        // Initialize computer player\n        computerFleet.generateRandomFleet();\n        computerBoard = new _scripts_gameboard__WEBPACK_IMPORTED_MODULE_5__[\"default\"](computerFleet.getFleet());\n        computer = new _scripts_computerPlayer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]('Computer', computerBoard, _scripts_computerAI__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n\n        _scripts_eventCreator__WEBPACK_IMPORTED_MODULE_3__[\"default\"].addFleetScreenEvents(fleetScreen, playerFleet);\n        document.querySelector('main').appendChild(fleetScreen);\n    });\n\n    fleetScreen\n        .querySelector('.js-start-game')\n        .addEventListener('click', () => {\n            if (playerFleet.isDone()) {\n                document.querySelector('main').textContent = '';\n                playerBoard = new _scripts_gameboard__WEBPACK_IMPORTED_MODULE_5__[\"default\"](playerFleet.getFleet());\n                player = new _scripts_player__WEBPACK_IMPORTED_MODULE_6__[\"default\"]('Player', playerBoard);\n                game = new _scripts_gameController__WEBPACK_IMPORTED_MODULE_9__[\"default\"](player, computer);\n                _scripts_eventCreator__WEBPACK_IMPORTED_MODULE_3__[\"default\"].addGameScreenEvents(gameScreen, game, audio);\n                document.querySelector('main').appendChild(gameScreen);\n            }\n        });\n\n    gameScreen\n        .querySelector('.js-restart-game')\n        .addEventListener('click', () => {\n            document.body.classList.toggle('gameover');\n            startGame();\n        });\n\n    document.querySelector('main').textContent = '';\n    document.querySelector('main').appendChild(startScreen);\n};\n\nconst page = _scripts_DOMCreator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createPage(audio);\n\npage.querySelector('.js-reset-game').addEventListener('click', startGame);\npage.querySelector('.js-sound').addEventListener('click', (e) => {\n    document.querySelector('.js-sound').classList.toggle('on');\n    audio.toggle();\n});\n\ndocument.body.appendChild(page);\nstartGame();\n\naudio\n    .playMusic()\n    .then(() => console.log('Music on'))\n    .catch(() => {\n        console.log('Music off');\n        document.querySelector('.js-sound').classList.toggle('on');\n        audio.toggle();\n    });\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/scripts/DOMCreator.js":
/*!***********************************!*\
  !*** ./src/scripts/DOMCreator.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass DOMCreator {\n    static createPage() {\n        return new Range().createContextualFragment(`\n            <header>\n                <button class=\"reset-button js-reset-game\">BATTLESHIP</button>\n                <button class=\"svg-button sound-button js-sound on\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                        <title>Sound on</title>\n                        <path d=\"M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z\" />\n                    </svg>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                        <title>Sound off</title>\n                        <path d=\"M12,4L9.91,6.09L12,8.18M4.27,3L3,4.27L7.73,9H3V15H7L12,20V13.27L16.25,17.53C15.58,18.04 14.83,18.46 14,18.7V20.77C15.38,20.45 16.63,19.82 17.68,18.96L19.73,21L21,19.73L12,10.73M19,12C19,12.94 18.8,13.82 18.46,14.64L19.97,16.15C20.62,14.91 21,13.5 21,12C21,7.72 18,4.14 14,3.23V5.29C16.89,6.15 19,8.83 19,12M16.5,12C16.5,10.23 15.5,8.71 14,7.97V10.18L16.45,12.63C16.5,12.43 16.5,12.21 16.5,12Z\" />\n                    </svg>\n                </button>\n            </header>\n            <main>\n                \n            </main>\n            <footer>\n                <p class=\"footer-text\">Created by <a src=\"https://github.com/wsfer\">@wsfer</a></p>\n                <section class=\"footer-links\">\n                    <a src=\"#\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <title>Linkedin</title>\n                            <path d=\"M19 3A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19M18.5 18.5V13.2A3.26 3.26 0 0 0 15.24 9.94C14.39 9.94 13.4 10.46 12.92 11.24V10.13H10.13V18.5H12.92V13.57C12.92 12.8 13.54 12.17 14.31 12.17A1.4 1.4 0 0 1 15.71 13.57V18.5H18.5M6.88 8.56A1.68 1.68 0 0 0 8.56 6.88C8.56 5.95 7.81 5.19 6.88 5.19A1.69 1.69 0 0 0 5.19 6.88C5.19 7.81 5.95 8.56 6.88 8.56M8.27 18.5V10.13H5.5V18.5H8.27Z\" />\n                        </svg>\n                    </a>\n                    <a src=\"https://github.com/wsfer\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <title>Github</title>\n                            <path d=\"M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z\" />\n                        </svg>\n                    </a>\n                </section>\n            </footer>\n        `);\n    }\n\n    static createStartScreen() {\n        return new Range().createContextualFragment(`\n            <h1 class=\"game-title\">BATTLESHIP<h1>\n            <button class=\"text-button js-new-game\">New Game</button>\n        `);\n    }\n\n    static createFleetScreen() {\n        let board = '';\n\n        for (let i = 0; i < 100; i++) {\n            board += `<div class=\"square js-square\" data-x=\"${Math.floor(\n                i / 10\n            )}\" data-y=\"${i % 10}\"></div>`;\n        }\n\n        return new Range().createContextualFragment(`\n            <h2>Build your fleet</h2>\n            <p>\n                <span class=\"js-selected-ship\">No ship</span> selected\n            </p>\n            <section class=\"fleet-builder\">\n                <section class=\"settings\">\n                    <button class=\"svg-button js-random-fleet\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <title>Random fleet</title>\n                            <path d=\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M7,5A2,2 0 0,0 5,7A2,2 0 0,0 7,9A2,2 0 0,0 9,7A2,2 0 0,0 7,5M17,15A2,2 0 0,0 15,17A2,2 0 0,0 17,19A2,2 0 0,0 19,17A2,2 0 0,0 17,15M17,5A2,2 0 0,0 15,7A2,2 0 0,0 17,9A2,2 0 0,0 19,7A2,2 0 0,0 17,5M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M7,15A2,2 0 0,0 5,17A2,2 0 0,0 7,19A2,2 0 0,0 9,17A2,2 0 0,0 7,15Z\" />\n                        </svg>\n                    </button>\n                    <button class=\"svg-button js-rotate-ship\" disabled>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <title>Rotate Ship</title>\n                            <path d=\"M12 7C6.5 7 2 9.2 2 12C2 14.2 4.9 16.1 9 16.8V20L13 16L9 12V14.7C5.8 14.1 4 12.8 4 12C4 10.9 7 9 12 9S20 10.9 20 12C20 12.7 18.5 13.9 16 14.5V16.6C19.5 15.8 22 14.1 22 12C22 9.2 17.5 7 12 7Z\" />\n                        </svg>\n                    </button>\n                    <button class=\"svg-button js-unselect-ship\" disabled>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <title>Unselect</title>\n                            <path d=\"M12 2C17.5 2 22 6.5 22 12S17.5 22 12 22 2 17.5 2 12 6.5 2 12 2M12 4C10.1 4 8.4 4.6 7.1 5.7L18.3 16.9C19.3 15.5 20 13.8 20 12C20 7.6 16.4 4 12 4M16.9 18.3L5.7 7.1C4.6 8.4 4 10.1 4 12C4 16.4 7.6 20 12 20C13.9 20 15.6 19.4 16.9 18.3Z\" />\n                        </svg>\n                    </button>\n                </section>\n                <section class=\"gameboard\">\n                    <div class=\"x-coords\">\n                        <div>A</div>\n                        <div>B</div>\n                        <div>C</div>\n                        <div>D</div>\n                        <div>E</div>\n                        <div>F</div>\n                        <div>G</div>\n                        <div>H</div>\n                        <div>I</div>\n                        <div>J</div>\n                    </div>\n                    <div class=\"y-coords\">\n                        <div>1</div>\n                        <div>2</div>\n                        <div>3</div>\n                        <div>4</div>\n                        <div>5</div>\n                        <div>6</div>\n                        <div>7</div>\n                        <div>8</div>\n                        <div>9</div>\n                        <div>10</div>\n                    </div>\n                    <div class=\"fleet js-fleet\">\n                        ${board}\n                    </div>\n                </section>\n                <section class=\"ship-container js-ship-container\">\n                    <div id=\"destroyer\" class=\"js-ship\" draggable=\"true\" data-direction=\"horizontal\" data-name=\"destroyer\" style=\"height: 3rem; width: 6rem; background-color: red\"></div>\n                    <div id=\"submarine\" class=\"js-ship\" draggable=\"true\" data-direction=\"horizontal\" data-name=\"submarine\" style=\"height: 3rem; width: 9rem; background-color: red\"></div>\n                    <div id=\"cruiser\" class=\"js-ship\" draggable=\"true\" data-direction=\"horizontal\" data-name=\"cruiser\" style=\"height: 3rem; width: 9rem; background-color: red\"></div>\n                    <div id=\"battleship\" class=\"js-ship\" draggable=\"true\" data-direction=\"horizontal\" data-name=\"battleship\" style=\"height: 3rem; width: 12rem; background-color: red\"></div>\n                    <div id=\"carrier\" class=\"js-ship\" draggable=\"true\" data-direction=\"horizontal\" data-name=\"carrier\" style=\"height: 3rem; width: 15rem; background-color: red\"></div>\n                </section>\n            </section>\n            <button class=\"solid-button js-start-game\" disabled>Start Game</button>\n        `);\n    }\n\n    static createGameScreen() {\n        let board = '';\n\n        for (let i = 0; i < 100; i++) {\n            board += `<div class=\"square js-square\" data-x=\"${Math.floor(\n                i / 10\n            )}\" data-y=\"${i % 10}\"></div>`;\n        }\n\n        return new Range().createContextualFragment(`\n            <p>\n                <span class=\"js-player-name-turn action-text\">Player</span> turn\n            </p>\n            <section class=\"player-boards-container\">\n                <section class=\"board-container\">\n                    <section class=\"fleet-status\">\n                        <div class=\"js-player-destroyer\"></div>\n                        <div class=\"js-player-submarine\"></div>\n                        <div class=\"js-player-cruiser\"></div>\n                        <div class=\"js-player-battleship\"></div>\n                        <div class=\"js-player-carrier\"></div>\n                    </section>\n                    <div class=\"fleet-container\">\n                        <h3 class=\"board-title\"><span>Player</span> fleet</h3>\n                        <section class=\"gameboard\">\n                            <div class=\"x-coords\">\n                                <div>A</div>\n                                <div>B</div>\n                                <div>C</div>\n                                <div>D</div>\n                                <div>E</div>\n                                <div>F</div>\n                                <div>G</div>\n                                <div>H</div>\n                                <div>I</div>\n                                <div>J</div>\n                            </div>\n                            <div class=\"y-coords\">\n                                <div>1</div>\n                                <div>2</div>\n                                <div>3</div>\n                                <div>4</div>\n                                <div>5</div>\n                                <div>6</div>\n                                <div>7</div>\n                                <div>8</div>\n                                <div>9</div>\n                                <div>10</div>\n                            </div>\n                            <div class=\"fleet js-player-fleet\">\n                                ${board}\n                            </div>\n                        </section>\n                    </div>\n                </section>\n                <section class=\"board-container\">\n                    <div class=\"fleet-container\">\n                        <h3 class=\"board-title\"><span>Computer</span> fleet</h3>\n                        <section class=\"gameboard\">\n                            <div class=\"x-coords\">\n                                <div>A</div>\n                                <div>B</div>\n                                <div>C</div>\n                                <div>D</div>\n                                <div>E</div>\n                                <div>F</div>\n                                <div>G</div>\n                                <div>H</div>\n                                <div>I</div>\n                                <div>J</div>\n                            </div>\n                            <div class=\"y-coords\">\n                                <div>1</div>\n                                <div>2</div>\n                                <div>3</div>\n                                <div>4</div>\n                                <div>5</div>\n                                <div>6</div>\n                                <div>7</div>\n                                <div>8</div>\n                                <div>9</div>\n                                <div>10</div>\n                            </div>\n                            <div class=\"fleet js-computer-fleet\">\n                                ${board}\n                            </div>\n                        </section>\n                    </div>\n                    <section class=\"fleet-status\">\n                        <div class=\"js-computer-destroyer\"></div>\n                        <div class=\"js-computer-submarine\"></div>\n                        <div class=\"js-computer-cruiser\"></div>\n                        <div class=\"js-computer-battleship\"></div>\n                        <div class=\"js-computer-carrier\"></div>\n                    </section>\n                </section>\n            </section>\n            <p class=\"js-combat-log action-text\">Attack!</p>\n            <section class=\"js-gameover-box\">\n                <h3><span class=\"js-winner\"></span> won the game</h3>\n                <button class=\"solid-button js-restart-game\">Play again</button>\n            </section>\n        `);\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DOMCreator);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/DOMCreator.js?");

/***/ }),

/***/ "./src/scripts/audioController.js":
/*!****************************************!*\
  !*** ./src/scripts/audioController.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass AudioController {\n    #music;\n\n    #explosion;\n\n    #splash;\n\n    constructor() {\n        this.#music = new Audio();\n        this.#explosion = new Audio();\n        this.#splash = new Audio();\n        this.#music.autoplay = true;\n        this.#music.loop = true;\n    }\n\n    toggle() {\n        this.#music.muted = !this.#music.muted;\n    }\n\n    async playMusic() {\n        return this.#music.play();\n    }\n\n    async playExplosion() {\n        if (!this.#music.muted) {\n            this.#explosion.play();\n        }\n    }\n\n    async playSplash() {\n        if (!this.#music.muted) {\n            this.#splash.play();\n        }\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AudioController);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/audioController.js?");

/***/ }),

/***/ "./src/scripts/computerAI.js":
/*!***********************************!*\
  !*** ./src/scripts/computerAI.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass ComputerAI {\n    static async generateMove(availableCoords, targetingShip) {\n        // No ship being targeted: return a random coord\n        if (targetingShip === null) {\n            // await new Promise((resolve) => {\n            //     setTimeout(resolve, Math.random() * 1000);\n            // });\n            return this.#getRandomCoord(availableCoords);\n        }\n\n        // Ship has only one discovered position: return one valid random adjacent coord\n        if (targetingShip.positions.length === 1) {\n            const position = targetingShip.positions[0];\n\n            // await new Promise((resolve) => {\n            //     setTimeout(resolve, Math.random() * 1000);\n            // });\n\n            return this.#getRandomAdjacentCoord(availableCoords, position);\n        }\n\n        // Ship has a discovered direction\n        // await new Promise((resolve) => {\n        //     setTimeout(resolve, Math.random() * 1000);\n        // });\n\n        return this.#getRandomEdgeCoord(\n            availableCoords,\n            targetingShip.direction,\n            targetingShip.positions\n        );\n    }\n\n    static #getRandomCoord(availableCoords) {\n        const coords = availableCoords.filter(\n            (row) => row.filter((col) => col).length > 0\n        );\n        const randomRow = coords[\n            Math.floor(Math.random() * coords.length)\n        ].filter((coord) => coord !== null);\n        return randomRow[Math.floor(Math.random() * randomRow.length)];\n    }\n\n    static #getRandomAdjacentCoord(availableCoords, [Cx, Cy]) {\n        const adjacents = [\n            [Cx + 1, Cy],\n            [Cx, Cy - 1],\n            [Cx, Cy + 1],\n            [Cx - 1, Cy],\n        ].filter(\n            ([x, y]) =>\n                x >= 0 &&\n                x < 10 &&\n                y >= 0 &&\n                y < 10 &&\n                availableCoords[x][y] !== null\n        );\n        return adjacents[Math.floor(Math.random() * adjacents.length)];\n    }\n\n    static #getRandomEdgeCoord(availableCoords, direction, positions) {\n        let edges;\n\n        if (direction === 'horizontal') {\n            const coordX = positions[0][0];\n            const allY = positions.map(([x, y]) => y);\n            edges = [\n                [coordX, Math.min(...allY) - 1],\n                [coordX, Math.max(...allY) + 1],\n            ].filter(\n                ([x, y]) => y >= 0 && y < 10 && availableCoords[x][y] !== null\n            );\n        }\n\n        if (direction === 'vertical') {\n            const coordY = positions[0][1];\n            const allX = positions.map(([x, y]) => x);\n            edges = [\n                [Math.min(...allX) - 1, coordY],\n                [Math.max(...allX) + 1, coordY],\n            ].filter(\n                ([x, y]) => x >= 0 && x < 10 && availableCoords[x][y] !== null\n            );\n        }\n        return edges[Math.floor(Math.random() * edges.length)];\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ComputerAI);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/computerAI.js?");

/***/ }),

/***/ "./src/scripts/computerPlayer.js":
/*!***************************************!*\
  !*** ./src/scripts/computerPlayer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/scripts/player.js\");\n\n\nclass ComputerPlayer extends _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    #isComputer;\n\n    #computerAI;\n\n    #coords;\n\n    #targetShip;\n\n    constructor(name, gameboard, computerAI) {\n        super(name, gameboard);\n        this.#isComputer = true;\n        this.#coords = Array(10)\n            .fill()\n            .map((row, x) =>\n                Array(10)\n                    .fill()\n                    .map((col, y) => [x, y])\n            );\n        this.#targetShip = null;\n        this.#computerAI = computerAI;\n    }\n\n    async attack(player) {\n        const coords = await this.#computerAI.generateMove(\n            this.#coords,\n            this.#targetShip\n        );\n\n        const attack = player.receiveAttack(coords);\n\n        this.#coords[attack.x][attack.y] = null;\n\n        if (attack.isShip) {\n            // First case: found a newly ship\n            // Second case: destroyed target ship\n            // Third case: add new position and update ship direction\n            if (this.#targetShip === null) {\n                this.#targetShip = {\n                    direction: null,\n                    positions: [[attack.x, attack.y]],\n                };\n            } else if (this.#targetShip.positions.length + 1 === attack.size) {\n                this.#targetShip = null;\n            } else {\n                const [shipCoordX] = this.#targetShip.positions[0];\n                this.#targetShip.positions.push([attack.x, attack.y]);\n                this.#targetShip.direction =\n                    attack.x === shipCoordX ? 'horizontal' : 'vertical';\n            }\n        }\n\n        return attack;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ComputerPlayer);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/computerPlayer.js?");

/***/ }),

/***/ "./src/scripts/eventCreator.js":
/*!*************************************!*\
  !*** ./src/scripts/eventCreator.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Add events liteners related to game loop\nclass EventCreator {\n    static addFleetScreenEvents(page, fleetBuilder) {\n        let selectedShip = null;\n        const selectedShipText = page.querySelector('.js-selected-ship');\n        const ships = page.querySelectorAll('.js-ship');\n        const squares = page.querySelectorAll('.js-square');\n        const rotateButton = page.querySelector('.js-rotate-ship');\n        const unselectButton = page.querySelector('.js-unselect-ship');\n        const startGameButton = page.querySelector('.js-start-game');\n\n        page.querySelector('.js-random-fleet').addEventListener('click', () => {\n            const moves = fleetBuilder.generateRandomFleet();\n            moves.forEach((move) => {\n                const ship = document.getElementById(move.target);\n                const [x, y] = move.newPositions[0];\n                const square = squares[x * 10 + y];\n                square.appendChild(ship);\n                if (ship.dataset.direction !== move.direction) {\n                    ship.dataset.direction = move.direction;\n                    [ship.style.width, ship.style.height] = [\n                        ship.style.height,\n                        ship.style.width,\n                    ];\n                }\n            });\n            startGameButton.disabled = false;\n        });\n        rotateButton.addEventListener('click', () => {\n            if (selectedShip !== null) {\n                const move = fleetBuilder.changeDirection(\n                    selectedShip.dataset.name\n                );\n                selectedShip.dataset.direction =\n                    selectedShip.dataset.direction === 'horizontal'\n                        ? 'vertical'\n                        : 'horizontal';\n                [selectedShip.style.width, selectedShip.style.height] = [\n                    selectedShip.style.height,\n                    selectedShip.style.width,\n                ];\n                if (!move.isValid) {\n                    document\n                        .querySelector('.js-fleet')\n                        .appendChild(selectedShip);\n                    startGameButton.disabled = true;\n                }\n            }\n        });\n        unselectButton.addEventListener('click', (e) => {\n            if (selectedShip !== null) {\n                selectedShip.classList.toggle('.selected');\n                selectedShip = null;\n                selectedShipText.classList.remove('action-text');\n                selectedShipText.textContent = 'No ship';\n                e.target.classList.toggle('disabled');\n                rotateButton.disabled = true;\n                unselectButton.disabled = true;\n            }\n        });\n        ships.forEach((ship) => {\n            ship.addEventListener('click', (e) => {\n                if (selectedShip !== e.target) {\n                    if (selectedShip !== null) {\n                        selectedShip.classList.toggle('.selected');\n                    } else {\n                        rotateButton.disabled = false;\n                        unselectButton.disabled = false;\n                    }\n                    selectedShip = e.target;\n                    e.target.classList.toggle('.selected');\n                    selectedShipText.textContent =\n                        e.target.dataset.name.charAt(0).toUpperCase() +\n                        e.target.dataset.name.slice(1);\n                    selectedShipText.classList.add('action-text');\n                    document\n                        .querySelector('.js-unselect-ship')\n                        .classList.toggle('disabled');\n                    rotateButton.disabled = false;\n                    unselectButton.disabled = false;\n                }\n            });\n            ship.addEventListener('dragstart', (e) => {\n                e.dataTransfer.setData('ship', e.target.id);\n                if (selectedShip !== e.target) {\n                    if (selectedShip !== null) {\n                        selectedShip.classList.toggle('.selected');\n                    } else {\n                        rotateButton.disabled = false;\n                        unselectButton.disabled = false;\n                    }\n                    selectedShip = e.target;\n                    e.target.classList.toggle('.selected');\n                    selectedShipText.textContent =\n                        e.target.dataset.name.charAt(0).toUpperCase() +\n                        e.target.dataset.name.slice(1);\n                    selectedShipText.classList.add('action-text');\n                    document\n                        .querySelector('.js-unselect-ship')\n                        .classList.toggle('disabled');\n                }\n            });\n        });\n        page.querySelector('.js-fleet').addEventListener('dragover', (e) => {\n            e.preventDefault();\n            if (e.target.classList.contains('.js-square')) {\n                e.target.classList.add('selected');\n            }\n        });\n        page.querySelector('.js-fleet').addEventListener('dragleave', (e) => {\n            if (e.target.classList.contains('.js-square')) {\n                e.target.classList.remove('selected');\n            }\n        });\n        page.querySelector('.js-fleet').addEventListener('drop', (e) => {\n            e.preventDefault();\n            if (e.target.classList.contains('js-square')) {\n                e.target.classList.remove('selected');\n                const id = e.dataTransfer.getData('ship');\n                const ship = document.getElementById(id);\n                const [x, y] = [\n                    Number(e.target.dataset.x),\n                    Number(e.target.dataset.y),\n                ];\n                const move = fleetBuilder.move(id, [x, y]);\n                if (move.isValid) {\n                    e.target.appendChild(ship);\n                    if (fleetBuilder.isDone()) {\n                        startGameButton.disabled = false;\n                    }\n                }\n            }\n        });\n    }\n\n    static addGameScreenEvents(page, game, audio) {\n        const combatLog = page.querySelector('.js-combat-log');\n        const currentPlayer = page.querySelector('.js-player-name-turn');\n        const computerFleet = page.querySelector('.js-computer-fleet');\n        const playerSquares = page.querySelectorAll(\n            '.js-player-fleet > .js-square'\n        );\n        const winnerName = page.querySelector('.js-winner');\n\n        computerFleet.addEventListener('click', async (e) => {\n            if (e.target.classList.contains('js-square')) {\n                computerFleet.classList.toggle('disabled');\n\n                const [x, y] = [\n                    Number(e.target.dataset.x),\n                    Number(e.target.dataset.y),\n                ];\n                const playerTurn = await game.play([x, y]);\n                combatLog.textContent = `${playerTurn.attacker} attacked ${playerTurn.defender}'s ${playerTurn.target}`;\n                currentPlayer.textContent = playerTurn.defender;\n\n                if (playerTurn.isShip) {\n                    e.target.classList.add('sunken');\n\n                    document.querySelector(\n                        `.js-computer-${playerTurn.target.toLowerCase()}`\n                    ).style.backgroundImage = `linear-gradient(to left, red 0 ${Math.round(\n                        (playerTurn.health / playerTurn.size) * 100\n                    )}%, white ${Math.round(\n                        (playerTurn.health / playerTurn.size) * 100\n                    )}% 100%)`;\n\n                    audio.playExplosion();\n                } else {\n                    e.target.classList.add('water');\n                    audio.playSplash();\n                }\n\n                if (playerTurn.gameover) {\n                    document.body.classList.toggle('gameover');\n                    winnerName.textContent = playerTurn.attacker;\n                    return;\n                }\n\n                const computerTurn = await game.play(null);\n                combatLog.textContent = `${computerTurn.attacker} attacked ${computerTurn.defender}'s ${computerTurn.target}`;\n                currentPlayer.textContent = computerTurn.defender;\n\n                if (computerTurn.isShip) {\n                    playerSquares[\n                        computerTurn.x * 10 + computerTurn.y\n                    ].classList.add('sunken');\n\n                    document.querySelector(\n                        `.js-player-${computerTurn.target.toLowerCase()}`\n                    ).style.backgroundImage = `linear-gradient(to right, red 0 ${Math.round(\n                        (computerTurn.health / computerTurn.size) * 100\n                    )}%, white ${Math.round(\n                        (computerTurn.health / computerTurn.size) * 100\n                    )}% 100%)`;\n\n                    audio.playExplosion();\n                } else {\n                    playerSquares[\n                        computerTurn.x * 10 + computerTurn.y\n                    ].classList.add('water');\n                    audio.playSplash();\n                }\n\n                if (computerTurn.gameover) {\n                    document.body.classList.toggle('gameover');\n                    winnerName.textContent = computerTurn.attacker;\n                    return;\n                }\n\n                computerFleet.classList.toggle('disabled');\n            }\n        });\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventCreator);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/eventCreator.js?");

/***/ }),

/***/ "./src/scripts/fleetBuilder.js":
/*!*************************************!*\
  !*** ./src/scripts/fleetBuilder.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Creates the matrix used on gameboard creation\nclass FleetBuilder {\n    #ships;\n    #fleet;\n    #validSpaces;\n\n    constructor() {\n        this.#ships = new Map([\n            [\n                'destroyer',\n                {\n                    name: 'destroyer',\n                    size: 2,\n                    direction: 'horizontal',\n                    positions: null,\n                },\n            ],\n            [\n                'submarine',\n                {\n                    name: 'submarine',\n                    size: 3,\n                    direction: 'horizontal',\n                    positions: null,\n                },\n            ],\n            [\n                'cruiser',\n                {\n                    name: 'cruiser',\n                    size: 3,\n                    direction: 'horizontal',\n                    positions: null,\n                },\n            ],\n            [\n                'battleship',\n                {\n                    name: 'battleship',\n                    size: 4,\n                    direction: 'horizontal',\n                    positions: null,\n                },\n            ],\n            [\n                'carrier',\n                {\n                    name: 'carrier',\n                    size: 5,\n                    direction: 'horizontal',\n                    positions: null,\n                },\n            ],\n        ]);\n\n        this.#fleet = Array(10)\n            .fill()\n            .map(() => Array(10).fill('water'));\n\n        // To keep track of available coords to place a ship\n        // true = valid position to place a ship\n        // false = invalid position to place a ship\n        this.#validSpaces = Array(10)\n            .fill()\n            .map(() => Array(10).fill(true));\n    }\n\n    #placeShip(ship) {\n        ship.positions.main.forEach(([x, y]) => {\n            this.#fleet[x][y] = ship.name;\n            this.#validSpaces[x][y] = false;\n        });\n        ship.positions.border.forEach(\n            ([x, y]) => (this.#validSpaces[x][y] = false)\n        );\n    }\n\n    #removeShip(ship) {\n        ship.positions.main.forEach(([x, y]) => {\n            this.#fleet[x][y] = 'water';\n            this.#validSpaces[x][y] = true;\n        });\n        ship.positions.border.forEach(([x, y]) => {\n            if (!this.#isSharedWithAnotherShip([x, y])) {\n                this.#validSpaces[x][y] = true;\n            }\n        });\n    }\n\n    // Check if a coord is close to another ship\n    #isSharedWithAnotherShip([x, y]) {\n        const closeCoords = [\n            [x - 1, y - 1],\n            [x - 1, y],\n            [x - 1, y + 1],\n            [x, y - 1],\n            [x, y + 1],\n            [x + 1, y - 1],\n            [x + 1, y],\n            [x + 1, y + 1],\n        ].filter(([x, y]) => x >= 0 && x < 10 && y >= 0 && y < 10);\n\n        for (const [x, y] of closeCoords) {\n            if (this.#fleet[x][y] !== 'water') return true;\n        }\n        return false;\n    }\n\n    // Get coords which a ship will occupy on both fleet and validSpaces\n    #getFutureCoords(ship, [x, y]) {\n        const main = Array(ship.size)\n            .fill()\n            .map((coord, index) =>\n                ship.direction === 'horizontal'\n                    ? [x, y + index]\n                    : [x + index, y]\n            );\n\n        const xValues = [];\n        const yValues = [];\n        for (let i = main[0][0] - 1; i <= main[main.length - 1][0] + 1; i++) {\n            xValues.push(i);\n        }\n        for (let i = main[0][1] - 1; i <= main[main.length - 1][1] + 1; i++) {\n            yValues.push(i);\n        }\n\n        // Get all possible combinations and filter coords which are on main or go out board\n        const border = xValues\n            .flatMap((x) => yValues.map((y) => [x, y]))\n            .filter(\n                ([x, y]) =>\n                    x >= 0 &&\n                    x < 10 &&\n                    y >= 0 &&\n                    y < 10 &&\n                    !main.map(([mx, my]) => mx === x && my === y).includes(true)\n            );\n\n        return {\n            main,\n            border,\n        };\n    }\n\n    // Returns true if all main coords are available to place a ship\n    #isValidMove(mainCoords) {\n        for (const [x, y] of mainCoords) {\n            if (x < 0 || x > 9 || y < 0 || y > 9 || !this.#validSpaces[x][y])\n                return false;\n        }\n        return true;\n    }\n\n    changeDirection(shipName) {\n        const ship = this.#ships.get(shipName);\n        ship.direction =\n            ship.direction === 'horizontal' ? 'vertical' : 'horizontal';\n\n        // If the ship was placed, change it's position\n        if (ship.positions) {\n            this.#removeShip(ship);\n\n            const coords = this.#getFutureCoords(ship, ship.positions.main[0]);\n            const isValid = this.#isValidMove(coords.main);\n\n            if (isValid) {\n                ship.positions = coords;\n                this.#placeShip(ship);\n            } else {\n                ship.positions = null;\n            }\n\n            return {\n                isValid,\n                target: ship.name,\n                size: ship.size,\n                direction: ship.direction,\n                newPositions: isValid ? coords.main : null,\n            };\n        }\n\n        return {\n            isValid: true,\n            target: ship.name,\n            size: ship.size,\n            direction: ship.direction,\n            newPositions: null,\n        };\n    }\n\n    move(shipName, position) {\n        const ship = this.#ships.get(shipName);\n\n        // Remove the ship to avoid conflict if it was placed before\n        if (ship.positions) {\n            this.#removeShip(ship);\n        }\n\n        const coords = this.#getFutureCoords(ship, position);\n        const isValid = this.#isValidMove(coords.main);\n\n        // If move is invalid the ship will go back to it's old position\n        ship.positions = isValid ? coords : ship.positions;\n        if (ship.positions) {\n            this.#placeShip(ship);\n        }\n\n        return {\n            isValid,\n            target: ship.name,\n            size: ship.size,\n            direction: ship.direction,\n            newPositions: isValid ? coords.main : null,\n        };\n    }\n\n    generateRandomFleet() {\n        // First clear everything\n        this.#fleet = Array(10)\n            .fill()\n            .map(() => Array(10).fill('water'));\n\n        this.#validSpaces = Array(10)\n            .fill()\n            .map(() => Array(10).fill(true));\n\n        [...this.#ships.values()].forEach((ship) => {\n            ship.positions = null;\n        });\n\n        const ships = [...this.#ships.keys()];\n        const moves = [];\n\n        while (ships.length > 0) {\n            const ship = ships.pop();\n\n            // Creates a matrix of available coords, if it's unavailable set it to false\n            // Also filter rows which have only false values\n            const coords = this.#validSpaces\n                .map((row, x) => row.map((col, y) => (col ? [x, y] : false)))\n                .filter((row) => row.filter((col) => col).length > 0);\n\n            // Select a random row from the matrix before and filter all available coords\n            const randomRow = coords[\n                Math.floor(Math.random() * coords.length)\n            ].filter((coord) => coord);\n\n            // Then select one random coord from this row\n            const randomCoord =\n                randomRow[Math.floor(Math.random() * randomRow.length)];\n\n            // Try moving the ship there, on a random direction\n            this.#ships.get(ship).direction = ['horizontal', 'vertical'][\n                Math.floor(Math.random() * 2)\n            ];\n            const move = this.move(ship, randomCoord);\n            if (move.isValid) {\n                moves.push(move);\n            } else {\n                ships.push(ship);\n            }\n        }\n\n        return moves;\n    }\n\n    // Returns true if all ships have positions\n    isDone() {\n        const ships = [...this.#ships.values()];\n        return ships.filter((position) => position).length === ships.length;\n    }\n\n    // Returns a COPY of fleet matrix\n    getFleet() {\n        return this.#fleet.map((row) => row.slice());\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FleetBuilder);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/fleetBuilder.js?");

/***/ }),

/***/ "./src/scripts/gameController.js":
/*!***************************************!*\
  !*** ./src/scripts/gameController.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass GameController {\n    #players;\n\n    constructor(playerOne, playerTwo) {\n        this.#players = [playerTwo, playerOne];\n    }\n\n    get nextPlayer() {\n        return this.#players[1];\n    }\n\n    async play(coords) {\n        const attacker = this.#players.pop();\n        const defender = this.#players.pop();\n        const attack = await attacker.attack(defender, coords);\n        this.#players.push(attacker, defender);\n        return {\n            attacker: attacker.name,\n            defender: defender.name,\n            ...attack,\n        };\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameController);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/gameController.js?");

/***/ }),

/***/ "./src/scripts/gameboard.js":
/*!**********************************!*\
  !*** ./src/scripts/gameboard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship */ \"./src/scripts/ship.js\");\n\n\n// Receives a matrix with object names and creates the fleet matrix, which has references to\n// game objects (ships, water, sunken ship) with it's own hit() methods\nclass Gameboard {\n    #objects;\n\n    #fleet;\n\n    constructor(matrix) {\n        this.#objects = new Map([\n            ['destroyer', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2, 'Destroyer')],\n            ['submarine', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](3, 'Submarine')],\n            ['cruiser', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](3, 'Cruiser')],\n            ['battleship', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](4, 'Battleship')],\n            ['carrier', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](5, 'Carrier')],\n            ['water', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 'Water')],\n            ['sunken', new _ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 'Sunken ship')],\n        ]);\n\n        this.#fleet = matrix.map((row) =>\n            row.map((name) => this.#objects.get(name))\n        );\n    }\n\n    receiveAttack([x, y]) {\n        const target = this.#fleet[x][y];\n        const hit = target.hit();\n\n        // When target is a ship\n        if (target.size > 0) {\n            this.#fleet[x][y] = this.#objects.get('sunken');\n            return {\n                ...hit,\n                x,\n                y,\n                isShip: true,\n                gameover: target.isSunk() ? this.#isGameOver() : false,\n            };\n        }\n\n        // When target is water or sunken ship\n        return {\n            target: hit.target,\n            x,\n            y,\n            isShip: false,\n            gameover: false,\n        };\n    }\n\n    // Returns true if all ships are sunk\n    #isGameOver() {\n        const ships = [...this.#objects.values()];\n        const sunkenShips = ships.filter((ship) => ship.isSunk());\n        return sunkenShips.length === ships.length;\n    }\n\n    getFleet() {\n        return this.#fleet.map((row) => row.map((obj) => obj.name));\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gameboard);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/gameboard.js?");

/***/ }),

/***/ "./src/scripts/player.js":
/*!*******************************!*\
  !*** ./src/scripts/player.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Player {\n    #name;\n\n    #gameboard;\n\n    #isComputer;\n\n    constructor(name, gameboard) {\n        this.#name = name;\n        this.#gameboard = gameboard;\n        this.#isComputer = false;\n    }\n\n    get name() {\n        return this.#name;\n    }\n\n    get isComputer() {\n        return this.#isComputer;\n    }\n\n    receiveAttack([x, y]) {\n        return this.#gameboard.receiveAttack([x, y]);\n    }\n\n    async attack(player, coords) {\n        return player.receiveAttack(coords);\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/player.js?");

/***/ }),

/***/ "./src/scripts/ship.js":
/*!*****************************!*\
  !*** ./src/scripts/ship.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Ship {\n    #size;\n\n    #health;\n\n    #name;\n\n    constructor(size, name) {\n        this.#size = size;\n        this.#health = size;\n        this.#name = name;\n    }\n\n    get size() {\n        return this.#size;\n    }\n\n    get health() {\n        return this.#health;\n    }\n\n    get name() {\n        return this.#name;\n    }\n\n    hit() {\n        if (this.#health > 0) {\n            this.#health -= 1;\n        }\n\n        return {\n            target: this.#name,\n            size: this.#size,\n            health: this.#health,\n        };\n    }\n\n    isSunk() {\n        return this.#health === 0;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n\n//# sourceURL=webpack://battleship/./src/scripts/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;